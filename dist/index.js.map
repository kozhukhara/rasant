{"version":3,"sources":["../src/index.ts","../src/lib/types.ts","../src/lib/utils.ts"],"sourcesContent":["import {\n  RasantConfig,\n  HandlerOption,\n  IncomingMessage,\n  Middleware,\n  getParseBodyFunction,\n  resExt,\n  Route,\n  ServerResponse,\n  Verbs,\n  WILDCARD,\n} from \"./lib\";\nimport http from \"http\";\nimport { parse as parseUrl } from \"url\";\nimport { join } from \"path\";\nimport { createReadStream, stat } from \"fs\";\nimport { performance } from \"perf_hooks\";\n\nexport class Rasant {\n  private readonly routerTree: any;\n  private server!: http.Server;\n  private readonly config: RasantConfig;\n  readonly logger = {\n    log: (...args: any[]) =>\n      console.log(`[${new Date().toLocaleString()}]`, ...args),\n  };\n\n  constructor(config: RasantConfig) {\n    this.config = config;\n    this.routerTree = this.buildRadixTree(config.router || []);\n  }\n\n  private buildRadixTree(routes: Route[]): any {\n    let rootNode = {};\n\n    const addRoute = (node: any, pathParts: string[], route: Route) => {\n      if (pathParts.length === 0) {\n        node.route = route;\n        if (route.nodes && route.nodes.length > 0) {\n          route.nodes.forEach((nestedRoute) => {\n            let nestedParts = nestedRoute.path.split(\"/\").filter((p) => p);\n            addRoute(node, nestedParts, nestedRoute);\n          });\n        }\n        delete route.nodes;\n        return;\n      }\n\n      let part = pathParts.shift() as string;\n      if (!node.children) {\n        node.children = {};\n      }\n\n      if (!node.children[part]) {\n        node.children[part] = {};\n      }\n\n      addRoute(node.children[part], pathParts, route);\n    };\n\n    routes.forEach((route) => {\n      let parts = route.path.split(\"/\").filter((p) => p);\n      addRoute(rootNode, parts, route);\n    });\n\n    return rootNode;\n  }\n\n  async serveStaticFiles(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!this.config.app.publicFolder) return resolve(false);\n      const requestedPath = req.url || \"/\";\n      let fullPath = join(this.config.app.publicFolder, requestedPath);\n      stat(fullPath, (err, stats) => {\n        if (err) {\n          return resolve(false);\n        }\n\n        if (stats.isDirectory()) {\n          fullPath = join(fullPath, \"index.html\");\n        }\n\n        stat(fullPath, (err, stats) => {\n          if (err || !stats.isFile()) {\n            return resolve(false);\n          }\n\n          const stream = createReadStream(fullPath).pipe(res);\n          stream.on(\"finish\", () => resolve(true));\n        });\n      });\n    });\n  }\n\n  public async handleRequest(\n    req: IncomingMessage,\n    res: ServerResponse,\n  ): Promise<ServerResponse> {\n    if (await this.serveStaticFiles(req, res)) return res;\n    const [route, handler] = this.findHandler(req);\n    if (!route) {\n      res.statusCode = 404;\n      res.statusMessage = \"Not Found\";\n      return res.end(res.statusMessage);\n    }\n\n    if (!handler) {\n      res.statusCode = 405;\n      res.statusMessage = \"Method Not Allowed\";\n      return res.end(res.statusMessage);\n    }\n\n    if (\n      req.method === \"POST\" ||\n      req.method === \"PUT\" ||\n      req.method === \"PATCH\"\n    ) {\n      req.parseBody = getParseBodyFunction(this.config.uploads);\n    }\n\n    return this.executeMiddlewaresAndHandler(req, res, route, handler);\n  }\n\n  private findHandler(\n    req: IncomingMessage,\n  ): [Route | undefined, HandlerOption | undefined] {\n    req.route = {\n      query: {},\n      params: {},\n    };\n    req.method = req.method?.toUpperCase();\n    const parsedUrl = parseUrl(req.url || \"\", true);\n    const pathSegments = (parsedUrl.pathname || \"\")\n      .split(\"/\")\n      .filter((segment) => segment.length > 0);\n    let currentNode = this.routerTree;\n    let params: { [key: string]: string } = {};\n\n    req.route.query = parsedUrl.query;\n    for (const segment of pathSegments) {\n      if (currentNode.children && currentNode.children[segment]) {\n        currentNode = currentNode.children[segment];\n      } else if (currentNode.children) {\n        const dynamicNodeKey = Object.keys(currentNode.children).find((key) => {\n          if (key === WILDCARD) return true;\n          if (key.startsWith(\":\")) {\n            const node = currentNode.children[key];\n            if (node && node.route && node.route.regex) {\n              return node.route.regex.test(segment);\n            } else {\n              return true;\n            }\n          }\n          return false;\n        });\n\n        if (dynamicNodeKey) {\n          const dynamicSegment: string = dynamicNodeKey.startsWith(\":\")\n            ? dynamicNodeKey.substring(1)\n            : dynamicNodeKey;\n          params[dynamicSegment === WILDCARD ? \"_slug\" : dynamicSegment] =\n            segment;\n          currentNode = currentNode.children[dynamicNodeKey];\n        } else {\n          return [undefined, undefined];\n        }\n      } else {\n        return [undefined, undefined];\n      }\n    }\n\n    req.route.params = params;\n\n    if (currentNode.route && currentNode.route.handlers) {\n      const handlerOption =\n        currentNode.route.handlers[req.method as Verbs] ||\n        currentNode.route.handlers[WILDCARD];\n      return [currentNode.route, handlerOption];\n    }\n\n    return [undefined, undefined];\n  }\n\n  private async executeMiddlewaresAndHandler(\n    req: IncomingMessage,\n    res: ServerResponse,\n    route: Route,\n    handler: HandlerOption,\n  ): Promise<ServerResponse> {\n    const routeMiddlewares: Middleware[] = route.middleware\n      ? [].concat(route.middleware as never[])\n      : [];\n    const handlerMiddlewares: Middleware[] = handler.middleware\n      ? [].concat(handler.middleware as never[])\n      : [];\n    const combinedMiddlewares: Middleware[] = [\n      ...routeMiddlewares,\n      ...handlerMiddlewares,\n    ];\n\n    const executeMiddleware = async (index: number) => {\n      if (index < combinedMiddlewares.length) {\n        const nextMiddleware = combinedMiddlewares[index];\n        const next = () => executeMiddleware(index + 1);\n        await nextMiddleware(req, res, next);\n      } else {\n        await handler.handler(req, res);\n      }\n    };\n\n    await executeMiddleware(0);\n    return res;\n  }\n\n  private handleCors(req: IncomingMessage, res: ServerResponse): void {\n    const corsConfig = this.config.cors;\n    if (!corsConfig) return;\n\n    const origin = req.headers.origin || \"\";\n    if (\n      corsConfig.allowedOrigins &&\n      (corsConfig.allowedOrigins.includes(WILDCARD) ||\n        corsConfig.allowedOrigins.includes(origin))\n    ) {\n      res.setHeader(\"Access-Control-Allow-Origin\", origin || WILDCARD);\n    }\n\n    if (corsConfig.allowedMethods) {\n      res.setHeader(\n        \"Access-Control-Allow-Methods\",\n        corsConfig.allowedMethods.join(\", \"),\n      );\n    }\n\n    if (corsConfig.allowedHeaders) {\n      res.setHeader(\n        \"Access-Control-Allow-Headers\",\n        corsConfig.allowedHeaders.join(\", \"),\n      );\n    }\n\n    if (corsConfig.allowCredentials) {\n      res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n    }\n\n    if (req.method === \"OPTIONS\") {\n      res.writeHead(204);\n      res.end();\n    }\n  }\n\n  start(callback?: () => any) {\n    this.server = http.createServer(async (req, res) => {\n      performance.mark(\"T0\");\n      Object.assign(res, resExt);\n      this.handleCors(req as IncomingMessage, res as ServerResponse);\n      return this.handleRequest(\n        req as IncomingMessage,\n        res as ServerResponse,\n      ).then((res) => {\n        performance.mark(\"T1\");\n        performance.measure(\"T[01]\", \"T0\", \"T1\");\n        const measure = performance.getEntriesByName(\"T[01]\")[0];\n        performance.clearMeasures(\"T[01]\");\n        if (this.config.app.logging)\n          this.logger.log(\n            `${req.method?.padStart(7, \" \")} ${req.url} â†’`,\n            res.statusCode,\n            `(${measure.duration.toFixed(3)}ms)`,\n          );\n        return;\n      });\n    });\n    this.server.listen(this.config.app.port, () =>\n      callback ? callback() : void 0,\n    );\n  }\n}\n","import {\n  IncomingMessage as IncomingMessageI,\n  ServerResponse as ServerResponseI,\n} from \"http\";\nimport { Options as UploadOptions } from \"formidable\";\n\nexport const WILDCARD = \"*\";\n\nexport type Wildcard = \"*\";\n\nexport type Verbs =\n  | \"GET\"\n  | \"POST\"\n  | \"PUT\"\n  | \"PATCH\"\n  | \"DELETE\"\n  | \"OPTIONS\"\n  | \"CONNECT\"\n  | \"HEAD\"\n  | Wildcard;\n\nexport interface AppConfig {\n  port: number;\n  publicFolder?: string;\n  logging?: boolean;\n}\n\nexport interface Cors {\n  allowedOrigins?: string[] | Wildcard;\n  allowedMethods?: Verbs[];\n  allowedHeaders?: string[];\n  allowCredentials?: boolean;\n}\n\nexport interface RasantConfig {\n  router: Route[];\n  cors?: Cors;\n  uploads?: UploadOptions;\n  app: AppConfig;\n}\n\nexport type Header = {\n  name: string;\n  value: number | string | readonly string[];\n};\n\nexport interface RequestRoute {\n  query: { [key in string]?: string | string[] };\n  params: { [key in string]?: string };\n}\n\nexport interface IncomingMessage extends IncomingMessageI {\n  route: RequestRoute;\n  body?: any;\n  context: any;\n  parseBody: () => Promise<void>;\n}\n\nexport interface ServerResponse extends ServerResponseI {\n  file: (path: string, options?: ResFileOptions) => Promise<any>;\n  setHeaders: (headers: Header[]) => this;\n  redirect: (to: string) => this;\n  status: (statusCode: number) => this;\n  html: (payload: string) => this;\n  json: (payload: any) => this;\n  send: (payload: string, options?: ResContentOptions) => this;\n}\n\nexport type Handler = (\n  req: IncomingMessage,\n  res: ServerResponse,\n) => ServerResponse | Promise<ServerResponse> | any | Promise<any>;\n\nexport type Middleware = (\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: () => void,\n) => void | Promise<void>;\n\nexport type HandlerOption = {\n  verb?: Verbs;\n  middleware?: Middleware | Middleware[];\n  handler: Handler;\n};\n\nexport interface Route {\n  path: string;\n  regex?: RegExp;\n  middleware?: Middleware | Middleware[];\n  handlers: {\n    [key in Verbs]?: HandlerOption;\n  };\n  nodes?: Route[];\n}\n\nexport interface ResFileOptions {\n  disposition?: string;\n  filename?: string;\n}\n\nexport interface ResContentOptions {\n  contentType?: string;\n  encoding?: string;\n}\n","import {\n  Header,\n  IncomingMessage,\n  RasantConfig,\n  ResContentOptions,\n  ResFileOptions,\n  ServerResponse,\n} from \"./types\";\nimport { defaultOptions, Options as UploadOptions } from \"formidable\";\nimport { parse } from \"querystring\";\nimport * as formidable from \"formidable\";\nimport { join, basename } from \"path\";\nimport { createReadStream } from \"fs\";\n\nexport const getParseBodyFunction = (options?: UploadOptions) => {\n  return function parseBody(this: IncomingMessage): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const contentType = this.headers[\"content-type\"];\n\n      if (contentType === \"application/json\") {\n        let body = \"\";\n        this.on(\"data\", (chunk) => (body += chunk));\n        this.on(\"end\", () => resolve(JSON.parse(body)));\n      } else if (contentType === \"application/x-www-form-urlencoded\") {\n        let body = \"\";\n        this.on(\"data\", (chunk) => (body += chunk));\n        this.on(\"end\", () => resolve(parse(body)));\n      } else if (contentType && contentType.startsWith(\"multipart/form-data\")) {\n        const form = new formidable.IncomingForm(options);\n        form.parse(this, (err, fields, files) => {\n          if (err) return reject(err);\n          resolve({ fields, files });\n        });\n      } else {\n        let body = \"\";\n        this.on(\"data\", (chunk) => (body += chunk));\n        this.on(\"end\", () => resolve(body));\n      }\n    });\n  };\n};\n\nexport const resExt: ServerResponse = <ServerResponse>{\n  file(path: string, options?: ResFileOptions) {\n    return new Promise<any>((resolve, reject) => {\n      this.setHeader(\n        \"Content-Disposition\",\n        `${options?.disposition || \"attachment\"}; filename=${\n          options?.filename || basename(path)\n        }`,\n      );\n      const stream = createReadStream(path);\n      stream.on(\"error\", reject);\n      stream.pipe(this);\n      stream.on(\"end\", resolve);\n    });\n  },\n\n  setHeaders(headers: Header[]) {\n    headers.forEach(({ name, value }) => {\n      this.setHeader(name, value);\n    });\n    return this;\n  },\n\n  redirect(to: string) {\n    this.writeHead(302, { Location: to });\n    this.end();\n    return this;\n  },\n\n  html(payload: string) {\n    this.setHeader(\"Content-Type\", \"text/html\");\n    this.end(payload);\n    return this;\n  },\n\n  json(payload: any) {\n    this.setHeader(\"Content-Type\", \"application/json\");\n    this.end(JSON.stringify(payload));\n    return this;\n  },\n\n  send(payload: string, options?: ResContentOptions) {\n    this.setHeader(\n      \"Content-Type\",\n      `${options?.contentType || \"text/plain\"}; charset=${\n        options?.encoding || \"utf-8\"\n      }`,\n    );\n    this.end(payload);\n    return this;\n  },\n\n  status(statusCode: number, statusMessage?: string) {\n    this.statusCode = statusCode || 200;\n    this.statusMessage = statusMessage || \"OK\";\n    return this;\n  },\n};\n"],"mappings":"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","names":["import_path","import_fs","err","stats","parseUrl","http","res"]}